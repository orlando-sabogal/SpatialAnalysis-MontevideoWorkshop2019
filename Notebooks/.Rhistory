updateSelectInput(session, "LoadedVariable4", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable5", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable6", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable7", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable8", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable9", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable10", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable11", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable12", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable13", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable14", choices = my_new_list, selected = 1)
updateSelectInput(session, "LoadedVariable15", choices = my_new_list, selected = 1)
})
observeEvent(input$AB,{
Inicio <- nrow(values$MyTable) + 1
Fin <- nrow(values$MyTable) + dim(values$DataLoaded)[1]
values$MyTable[Inicio:Fin,] <- data.frame(Inicio:Fin,
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]),rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]),rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]),rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]),rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]))
###Here I need an if so: if the variable is not within the uploaded data then
###it should do nothing (assign 0).
if (as.numeric(input$LoadedVariableLongitud) > 1){
values$MyTable[Inicio:Fin,2] <- values$DataLoaded[,as.numeric(input$LoadedVariableLongitud)-1]
}
if (as.numeric(input$LoadedVariableLatitud) > 1){
values$MyTable[Inicio:Fin,3] <- values$DataLoaded[,as.numeric(input$LoadedVariableLatitud)-1]
}
if (as.numeric(input$LoadedVariable1) > 1){
values$MyTable[Inicio:Fin,4] <- values$DataLoaded[,as.numeric(input$LoadedVariable1)-1]
}
if (as.numeric(input$LoadedVariable2) > 1){
values$MyTable[Inicio:Fin,5] <- values$DataLoaded[,as.numeric(input$LoadedVariable2)-1]
}
if (as.numeric(input$LoadedVariable3) > 1){
values$MyTable[Inicio:Fin,6] <- values$DataLoaded[,as.numeric(input$LoadedVariable3)-1]
}
if (as.numeric(input$LoadedVariable4) > 1){
values$MyTable[Inicio:Fin,7] <- values$DataLoaded[,as.numeric(input$LoadedVariable4)-1]
}
if (as.numeric(input$LoadedVariable5) > 1){
values$MyTable[Inicio:Fin,8] <- values$DataLoaded[,as.numeric(input$LoadedVariable5)-1]
}
if (as.numeric(input$LoadedVariable6) > 1){
values$MyTable[Inicio:Fin,8] <- values$DataLoaded[,as.numeric(input$LoadedVariable6)-1]
}
if (as.numeric(input$LoadedVariable7) > 1){
values$MyTable[Inicio:Fin,10] <- values$DataLoaded[,as.numeric(input$LoadedVariable7)-1]
}
if (as.numeric(input$LoadedVariable8) > 1){
values$MyTable[Inicio:Fin,11] <- values$DataLoaded[,as.numeric(input$LoadedVariable8)-1]
}
if (as.numeric(input$LoadedVariable9) > 1){
values$MyTable[Inicio:Fin,12] <- values$DataLoaded[,as.numeric(input$LoadedVariable9)-1]
}
if (as.numeric(input$LoadedVariable10) > 1){
values$MyTable[Inicio:Fin,13] <- values$DataLoaded[,as.numeric(input$LoadedVariable10)-1]
}
if (as.numeric(input$LoadedVariable11) > 1){
values$MyTable[Inicio:Fin,14] <- values$DataLoaded[,as.numeric(input$LoadedVariable11)-1]
}
if (as.numeric(input$LoadedVariable12) > 1){
values$MyTable[Inicio:Fin,15] <- values$DataLoaded[,as.numeric(input$LoadedVariable12)-1]
}
##Variavles added by user
if (as.numeric(input$LoadedVariable13) > 1){
values$MyTable[Inicio:Fin,16] <- values$DataLoaded[,as.numeric(input$LoadedVariable13)-1]
}
if (as.numeric(input$LoadedVariable14) > 1){
values$MyTable[Inicio:Fin,17] <- values$DataLoaded[,as.numeric(input$LoadedVariable14)-1]
}
if (as.numeric(input$LoadedVariable15) > 1){
values$MyTable[Inicio:Fin,18] <- values$DataLoaded[,as.numeric(input$LoadedVariable15)-1]
}
##
IndexFilter <- values$MyTableReference2
MyFilter <- values$MyTableReference[IndexFilter>0]
values$MyTableShow <- values$MyTable[,MyFilter]
values$DataLoaded <- NULL
reset("FileLoad")
reset("LoadedVariableLongitud")
reset("LoadedVariableLatitud")
reset("LoadedVariable1")
reset("LoadedVariable2")
reset("LoadedVariable3")
reset("LoadedVariable4")
reset("LoadedVariable5")
reset("LoadedVariable7")
reset("LoadedVariable7")
reset("LoadedVariable8")
reset("LoadedVariable9")
reset("LoadedVariable10")
reset("LoadedVariable11")
reset("LoadedVariable12")
reset("LoadedVariable13")
reset("LoadedVariable14")
reset("LoadedVariable15")
})
#observeEvent(input$LoadedVariable1,{
#  print(input$LoadedVariable1)
#})
values$AuxNuevasVariables <- data.frame(Objeto = c("NV1","NV2","NV3"),
Borrador = c("BNV1","BNV2","BNV3"),
RefObjeto = c("div:has(> #PesoVariable13)",
"div:has(> #PesoVariable14)",
"div:has(> #PesoVariable15)"),
RefBorrador = c("#BNV1","#BNV2","#BNV3"),
RefIngresar = c("div:has(> #Variable13)",
"div:has(> #Variable14)",
"div:has(> #Variable15)"),
RefCargarVariables = c("div:has(> #LoadedVariable13)",
"div:has(> #LoadedVariable14)",
"div:has(> #LoadedVariable15)"))
# LoadedVariable13
observeEvent(input$add, {
if (as.numeric(input$add) == 1) {
insertUI(selector = "#PesosVariables",where = "afterEnd",
ui = numericInput("PesoVariable13", input$NameVN, value = 0,min = 0, max = 1, step = 0.01))
insertUI(selector = "#VariablesCargar",where = "afterEnd",
ui = selectInput("LoadedVariable13", input$NameVN, c()))
insertUI(selector = "#IngresarNuevasVariables",where = "afterEnd",
ui = numericInput("Variable13", input$NameVN, value = 1))
insertUI(selector = "#ESTE",where = "afterEnd",
ui = actionButton(as.character(values$AuxNuevasVariables[1,2]),
paste("Borrar Variable", input$NameVN)))
insertUI(selector = "#ESTE", where = "afterEnd", ui = br())
values$MyTableReference2[16] <- 1
}
if (as.numeric(input$add) == 2) {
insertUI(selector = "#PesosVariables", where = "afterEnd",
ui = numericInput("PesoVariable14", input$NameVN, value = 0,min = 0, max = 1, step = 0.01))
insertUI(selector = "#VariablesCargar",where = "afterEnd",
ui = selectInput("LoadedVariable14", input$NameVN, c()))
insertUI(selector = "#IngresarNuevasVariables",where = "afterEnd",
ui = numericInput("Variable14", input$NameVN, value = 1))
insertUI(selector = "#ESTE", where = "afterEnd",
ui = actionButton(as.character(values$AuxNuevasVariables[2,2]),
paste("Borrar Variable", input$NameVN)))
insertUI(selector = "#ESTE", where = "afterEnd",ui = br())
values$MyTableReference2[17] <- 1
}
if (as.numeric(input$add) == 3) {
insertUI(selector = "#PesosVariables", where = "afterEnd",
ui = numericInput("PesoVariable15", input$NameVN, value = 0,min = 0, max = 1, step = 0.01))
insertUI(selector = "#VariablesCargar",where = "afterEnd",
ui = selectInput("LoadedVariable15", input$NameVN, c()))
insertUI(selector = "#IngresarNuevasVariables",where = "afterEnd",
ui = numericInput("Variable15", input$NameVN, value = 1))
insertUI(selector = "#ESTE", where = "afterEnd",
ui = actionButton(as.character(values$AuxNuevasVariables[3,2]),
paste("Borrar Variable", input$NameVN)))
insertUI(selector = "#ESTE", where = "afterEnd",ui = br())
values$MyTableReference2[18] <- 1
}
reset("NameVN")
})
##When I delete the "Pesos" option for each variable, it should not be
##avaible either within the data set. I have to reset some auxiliary reactive variables.
observeEvent(input$BNV1, {
removeUI(selector = as.character(values$AuxNuevasVariables[1,3]))
removeUI(selector = as.character(values$AuxNuevasVariables[1,4]))
removeUI(selector = as.character(values$AuxNuevasVariables[1,5]))
removeUI(selector = as.character(values$AuxNuevasVariables[1,6]))
values$MyTableReference2[16] <- 0 })
observeEvent(input$BNV2, {
removeUI(selector = as.character(values$AuxNuevasVariables[2,3]))
removeUI(selector = as.character(values$AuxNuevasVariables[2,4]))
removeUI(selector = as.character(values$AuxNuevasVariables[2,5]))
values$MyTableReference2[17] <- 0 })
observeEvent(input$BNV3, {
removeUI(selector = as.character(values$AuxNuevasVariables[3,3]))
removeUI(selector = as.character(values$AuxNuevasVariables[3,4]))
removeUI(selector = as.character(values$AuxNuevasVariables[3,5]))
values$MyTableReference2[18] <- 0 })
output$contents <- renderTable({
#inFile <- input$FileLoad
if (is.null(input$FileLoad))
return(NULL)
values$DataLoaded
})
##########Priorizar Datos
values$pesos <- rep(0,15)
observeEvent(input$Priorizar, {
#source(file="Prueba.R", local=T)
#https://r-bar.net/organize-r-shiny-list-source/
values$Priorizacion <- values$MyTable
values$Priorizacion[,4] <- values$Priorizacion[,4]*input$PesoVariable1
values$Priorizacion[,5] <- values$Priorizacion[,5]*input$PesoVariable2
values$Priorizacion[,6] <- values$Priorizacion[,6]*input$PesoVariable3
values$Priorizacion[,7] <- values$Priorizacion[,7]*input$PesoVariable4
values$Priorizacion[,8] <- values$Priorizacion[,8]*input$PesoVariable5
values$Priorizacion[,9] <- values$Priorizacion[,9]*input$PesoVariable6
values$Priorizacion[,10] <- values$Priorizacion[,10]*input$PesoVariable7
values$Priorizacion[,11] <- values$Priorizacion[,11]*input$PesoVariable8
values$Priorizacion[,12] <- values$Priorizacion[,12]*input$PesoVariable9
values$Priorizacion[,13] <- values$Priorizacion[,13]*input$PesoVariable10
values$Priorizacion[,14] <- values$Priorizacion[,14]*input$PesoVariable11
values$Priorizacion[,15] <- values$Priorizacion[,15]*input$PesoVariable12
values$Priorizacion[,16] <- values$Priorizacion[,16]*input$PesoVariable13
values$Priorizacion[,17] <- values$Priorizacion[,17]*input$PesoVariable14
values$Priorizacion[,18] <- values$Priorizacion[,18]*input$PesoVariable15
values$Priorizacion[,c(dim(values$Priorizacion)[2]+1)] <- rep(0, dim(values$MyTable)[1])
values$Priorizacion[,c(dim(values$Priorizacion)[2]+1)] <- rep(0, dim(values$MyTable)[1])
Score <- apply(values$Priorizacion[,4:18], 1, sum, na.rm=TRUE)
values$temp <- values$MyTableShow
values$temp$Score <- Score
values$temp <- values$temp[order(values$temp$Score),]
values$temp$Order <- seq(1:dim(values$temp)[1])
})
output$tableprio <- renderDT(values$temp , selection = 'none', editable = TRUE,
extensions = c("FixedColumns","Scroller"),
options = list(dom = 't', scrollX = TRUE, fixedColumns = TRUE,
deferRender = TRUE, scrollY = 200, scroller = TRUE))
##########
##Descarga Puntos Priorizados
output$downloadDataPrio <- downloadHandler(
filename = function() {
paste("Priorizacion", ".csv", sep = ".")
},
content = function(file) {
write.table(values$temp, file, sep = ";",
row.names = FALSE)
}
)
#########
})
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
test <- <- data.frame(Inicio:Fin,
rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]))
test <- data.frame(Inicio:Fin,
rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]), rep(0,dim(values$DataLoaded)[1]),
rep(0,dim(values$DataLoaded)[1]))
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad/Version01Mayo')
runApp('Dropbox/Manizales_Accidentalidad/Version01Mayo')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
shiny::runApp('Dropbox/Manizales_Accidentalidad')
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
))
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
))
library(shiny)
library(leaflet)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput(outputId = "distPlot")
)
))
server <- function(input, output){
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
leafletOutput("MyMap", width="100%", height="100%")
)
))
server <- function(input, output){
output$MyMap <- renderLeaflet({
leaflet() %>%
setView(lng = -74.075611, lat = 4.65, zoom = 12) %>%
addProviderTiles(providers$CartoDB.Positron) #%>%
#addPolygons(data = Buffers(), color = "#444444",  weight = 1)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
leafletOutput("MyMap")
)
))
server <- function(input, output){
output$MyMap <- renderLeaflet({
leaflet() %>%
setView(lng = -74.075611, lat = 4.65, zoom = 12) %>%
addProviderTiles(providers$CartoDB.Positron) #%>%
#addPolygons(data = Buffers(), color = "#444444",  weight = 1)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
tags$head(
# Include our custom CSS
includeCSS("styles.css")
#includeScript("gomap.js")
),
leafletOutput("MyMap")
)
))
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
tags$head(
# Include our custom CSS
includeCSS("/styles.css")
#includeScript("gomap.js")
),
leafletOutput("MyMap")
)
))
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
tags$head(
# Include our custom CSS
includeCSS("./styles.css")
#includeScript("gomap.js")
),
leafletOutput("MyMap")
)
))
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
install.packages('xaringan')
shiny::runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgeos")
install.packages("sf")
shiny::runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
library(sf)
library(tidyverse)
library(magrittr)
library(sf)
setwd("~/Dropbox/SanJose_Analysis/UberPeak")
Uber <- read_delim("ResultPeakQuery_SanJose.csv", delim = ";")
Uber <- Uber %>% mutate(duration = duration/60)
setwd("~/Dropbox/SanJose_Analysis/Preliminar")
#Perhaps we should use the EOD file and reconstruc the Viajes object.
#EOD <- read_delim(file = "EOD COMPLETA.csv", delim = ";")
Viajes <- read_delim(file = "Viajes.csv", delim = ";")
#I have many variables fot the transport mode. They are quite similar but not the same.
#Is the same with travel time, there are two variables and they have differences
library(tidyverse)
library(magrittr)
library(knitr)
library(sf)
library(tmap)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/Analisys_ModalShift/ZatsVectores")
ZonesCarro <- st_read("ZonesCarro.shp")
ZonesTaxi <- st_read("ZonesTaxi.shp")
ZonesTP <- st_read("ZonesTP.shp")
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/AuxiliarData")
Zones <- st_read("ZATs_2012_MAG.shp")
ZonesGeneration2 <- st_read("ZonesGeneration2.shp")
Bogota <- st_read("ZonesBogota.shp")
Transmilenio <- st_read("Transmilenio.shp")
st_is_longlat(Transmilenio)
Transmilenio2 = st_transform(Transmilenio, 2163)
st_is_longlat(Transmilenio2)
Transmilenio500 <- st_buffer(Transmilenio2, dist = 500)
Transmilenio1000 <- st_buffer(Transmilenio2, dist = 1000)
Transmilenio1500 <- st_buffer(Transmilenio2, dist = 1500)
Transmilenio2000 <- st_buffer(Transmilenio2, dist = 2000)
Transmilenio500 %<>% mutate(ID=1) %>% group_by(ID) %>% summarise(Total = n())
Transmilenio500 %<>% mutate(AreaBuffer = st_area(Transmilenio500))
shiny::runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
shiny::runApp('Desktop/Test')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
setwd("~/Downloads/accidentes2006-2010")
library(sf)
Accidente <- read_sf("accidentes2006-2010.shp")
Accidente
plot(Accidente)
plot(st_geometry(Accidente))
Accidente@geometry
View(Accidente)
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks")
