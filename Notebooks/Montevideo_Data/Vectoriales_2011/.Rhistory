max = 50,
value = 30)
),
mainPanel(
tags$head(
# Include our custom CSS
includeCSS("styles.css")
#includeScript("gomap.js")
),
leafletOutput("MyMap")
)
))
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
tags$head(
# Include our custom CSS
includeCSS("/styles.css")
#includeScript("gomap.js")
),
leafletOutput("MyMap")
)
))
ui <- fluidPage(
titlePanel("Hello Shiny!"),
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
tags$head(
# Include our custom CSS
includeCSS("./styles.css")
#includeScript("gomap.js")
),
leafletOutput("MyMap")
)
))
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
runApp('Dropbox/Experiments/ShinyLeafletTransitions')
install.packages('xaringan')
shiny::runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
install.packages("rgdal")
install.packages("rgdal")
install.packages("rgeos")
install.packages("sf")
shiny::runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
library(sf)
library(tidyverse)
library(magrittr)
library(sf)
setwd("~/Dropbox/SanJose_Analysis/UberPeak")
Uber <- read_delim("ResultPeakQuery_SanJose.csv", delim = ";")
Uber <- Uber %>% mutate(duration = duration/60)
setwd("~/Dropbox/SanJose_Analysis/Preliminar")
#Perhaps we should use the EOD file and reconstruc the Viajes object.
#EOD <- read_delim(file = "EOD COMPLETA.csv", delim = ";")
Viajes <- read_delim(file = "Viajes.csv", delim = ";")
#I have many variables fot the transport mode. They are quite similar but not the same.
#Is the same with travel time, there are two variables and they have differences
library(tidyverse)
library(magrittr)
library(knitr)
library(sf)
library(tmap)
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/Analisys_ModalShift/ZatsVectores")
ZonesCarro <- st_read("ZonesCarro.shp")
ZonesTaxi <- st_read("ZonesTaxi.shp")
ZonesTP <- st_read("ZonesTP.shp")
setwd("~/Dropbox/IDB Uber Bog/Analysis_April2019/AuxiliarData")
Zones <- st_read("ZATs_2012_MAG.shp")
ZonesGeneration2 <- st_read("ZonesGeneration2.shp")
Bogota <- st_read("ZonesBogota.shp")
Transmilenio <- st_read("Transmilenio.shp")
st_is_longlat(Transmilenio)
Transmilenio2 = st_transform(Transmilenio, 2163)
st_is_longlat(Transmilenio2)
Transmilenio500 <- st_buffer(Transmilenio2, dist = 500)
Transmilenio1000 <- st_buffer(Transmilenio2, dist = 1000)
Transmilenio1500 <- st_buffer(Transmilenio2, dist = 1500)
Transmilenio2000 <- st_buffer(Transmilenio2, dist = 2000)
Transmilenio500 %<>% mutate(ID=1) %>% group_by(ID) %>% summarise(Total = n())
Transmilenio500 %<>% mutate(AreaBuffer = st_area(Transmilenio500))
shiny::runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
shiny::runApp('Desktop/Test')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
shiny::runApp('Dropbox/Manizales_Accidentalidad')
runApp('Dropbox/Manizales_Accidentalidad')
ls()
library(tidyverse)
library(magrittr)
library(sf)
setwd("~/Dropbox/SanJose_Analysis/UberPeak")
Uber <- read_delim("ResultPeakQuery_SanJose.csv", delim = ";")
Uber <- Uber %>% mutate(duration = duration/60)
setwd("~/Dropbox/SanJose_Analysis/Preliminar")
#Perhaps we should use the EOD file and reconstruc the Viajes object.
#EOD <- read_delim(file = "EOD COMPLETA.csv", delim = ";")
Viajes <- read_delim(file = "Viajes.csv", delim = ";")
#I have many variables fot the transport mode. They are quite similar but not the same.
#Is the same with travel time, there are two variables and they have differences
summary(as.factor(Viajes$modo1_))
Viajes2 <- Viajes %>% select(id, viaje, modo_pal1, modo_pal2, modo1_, dura_min_, dura_min1_,
coord_orig_, coord_dest_)
MisViajes <- Viajes2 %>% select(id, viaje, modo1_, dura_min_,coord_orig_, coord_dest_)
MisViajes <- MisViajes[complete.cases(MisViajes),]
Data <- MisViajes %>% left_join(Uber)
Data <- Data %>% filter(duration>5)
summary(as.factor(Data$modo1_))
Viajes %>% names
Viajes2 <- Viajes %>% select(id, viaje, modo_pal1, modo_pal2, modo1_, dura_min_, dura_min1_,
coord_orig_, coord_dest_)
CarUber <- Data %>% filter(modo1_ == "Autom√≥vil")
TaxiUber <- Data %>% filter(modo1_ == "Taxi ofici")
TPUber <- Data %>% filter(modo1_ == "Autobus/bu")
CarUber %>% dim
CarTaxiUberUber %>% dim
TaxiUber %>% dim
TPUber %>% dim
summary(as.factor(Viajes$modo1_))
ConstanteCarro <- -1.55
ConstanteTaxi <- -0.652
ConstanteTP <- -1.2
CoeficienteTiempoCarro <- -0.1140
CoeficienteTiempoTaxi <- -0.0529
CoeficienteTiempoTP <- -0.0367
MinutoVOT_Carro <- 150.7937
MinutoVOT_Taxi <- 123.3100
MinutoVOT_TP <- 61.1667
CarUber %<>% mutate(
Desutility = ConstanteCarro +
dura_min_*MinutoVOT_Carro*CoeficienteTiempoCarro,
DesutilityUber = ConstanteCarro +
duration*MinutoVOT_Carro*CoeficienteTiempoCarro
)
TaxiUber %<>% mutate(
Desutility = ConstanteTaxi +
dura_min_*MinutoVOT_Taxi*CoeficienteTiempoTaxi,
DesutilityUber = ConstanteTaxi +
duration *MinutoVOT_Taxi*CoeficienteTiempoTaxi
)
TPUber %<>% mutate(
Desutility = ConstanteTP +
dura_min_*MinutoVOT_TP*CoeficienteTiempoTP,
DesutilityUber = ConstanteTP +
duration*MinutoVOT_TP*CoeficienteTiempoTP
)
CarUber %<>% mutate(Prop = c(DesutilityUber)/c(DesutilityUber + Desutility))
TaxiUber %<>% mutate(Prop = c(DesutilityUber)/c(DesutilityUber + Desutility))
TPUber %<>% mutate(Prop = c(DesutilityUber)/c(DesutilityUber + Desutility))
View(CarUber)
Viajes %>% names
CarUber %>% names
ggplot(data = CarUber) + geom_histogram(aes(x = Prop))
ggplot(data = CarUber) + geom_histogram(aes(x = Prop)) + theme_minimal()
ggplot(data = CarUber) + geom_histogram(aes(x = Prop)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
View(Prop)
View(CarUber)
ggplot(data = CarUber) + geom_histogram(aes(x = Prop), binwidth = 0.05) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "green",
binwidth = 0.05) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.05) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.05) +
scale_x_continuous(breaks = seq(0,1,0.1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.05) +
scale_x_continuous(breaks = seq(0,1,0.05)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.05) +
scale_x_continuous(breaks = seq(0,1,0.1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous(breaks = seq(0,1,0.1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%")) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = rep(0,100,20))
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = rep(0,100,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,100,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,140,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1)
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,8,1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1)
ggplot(data = TPUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,140,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TPUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,12,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TPUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,120,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TPUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,100,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
geom_smooth() +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,8,1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
geom_smooth(aes(x = Prop)) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,8,1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
geom_density(aes(x = Prop)) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,8,1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
geom_density() +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,8,1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = TaxiUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,8,1)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
ggplot(data = CarUber) + geom_histogram(aes(x = Prop),
colour = "white",
binwidth = 0.1) +
geom_density(aes(x= Prop)) +
scale_x_continuous( breaks = seq(0,1,0.1),
labels =  c("0%","10%", "20%", "30%", "40%", "50%",
"60%", "70%", "80%", "90%", "100%")) +
scale_y_continuous(breaks = seq(0,140,20)) +
theme_minimal() +
xlab("Probabilidad") + ylab("Cantidad de Viajes")
getwd()
list.files()
setwd("Desktop/")
getwd()
setwd("..")
getwd()
setwd("Downloads/")
setwd("accidentes2006-2010/")
list.files
list.files()
library(sf)
getwd()
Accidentes <- st_read("accidentes2006-2010.shp")
setwd("/Users/sabogal/Downloads/accidentes2006-2010")
Accidentes <- st_read("accidentes2006-2010.shp")
names(Accidentes)
Accidentes
plot(Accidentes)
plot(st_geometry(Accidentes))
?plot
plot(st_geometry(Accidentes),lwd = 2 )
plot(st_geometry(Accidentes),lwd = 0.1 )
plot(st_geometry(Accidentes), pch = 3 )
plot(st_geometry(Accidentes), cex = 3 )
plot(st_geometry(Accidentes), cex = 0.1)
plot(st_geometry(Accidentes), cex = 0.05)
plot(st_geometry(Accidentes), cex = 0.05, alpha = 0.4)
plot(st_geometry(Accidentes), cex = 0.05, colour = "blue")
plot(st_geometry(Accidentes), cex = 0.05, color = "blue")
plot(st_geometry(Accidentes), cex = 0.05, col = "blue")
summary(Accidentes)
AllCRS <- rgdal::make_EPSG()
View(AllCRS)
Accidentes = st_set_crs(Accidentes, 32721)
Accidentes
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
Zons <- st_read("line_depto.shp")
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
Zones <- st_read("line_depto.shp")
Zones <- st_read("line_loc11_pg.shp")
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
Zones <- st_read("line_loc11_pg.shp")
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/montevideourbano_shp")
list.files()
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/montevideourbano_shp")
Zones <- st_read("MontevideoUrbano.shp")
plot(st_geometry(Zones))
plot(st_geometry(Zones), lwd = 0.5)
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
list.files()
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
Zones <- st_read("ine_loc11_pt.shp")
plot(Zones)
plot(st_geometry(Zones))
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
Zones <- st_read("ine_depto.shp")
plot(st_geometry(Zones))
View(Zones)
plot(st_geometry(Zones))
plot(st_geometry(Zones))
Montevideo <- Zones[Zones$NOMBRE == "MONTEVIDEO",]
Montevideo <- Zones[Zones$NOMBRE == "MONTEVIDEO",]
plot(st_geometry(Montevide))
Montevideo <- Zones[Zones$NOMBRE == "MONTEVIDEO",]
plot(st_geometry(Montevideo))
Montevideo <- Zones %>% filter(NOMBRE == "MONTEVIDEO")
Montevideo <- Zones %>% filter(NOMBRE = "MONTEVIDEO")
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/Vectoriales_2011")
Zones <- st_read("ine_depto.shp")
plot(st_geometry(Zones))
Montevideo <- Zones %>% filter(NOMBRE == "MONTEVIDEO")
Zones
library(tidyverse)
Montevideo <- Zones %>% filter(NOMBRE == "MONTEVIDEO")
library(tidyverse)
Montevideo <- Zones %>% filter(NOMBRE == "MONTEVIDEO")
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/montevideourbano_shp")
MontevideoUrbano <- st_read("MontevideoUrbano.shp")
setwd("~/Dropbox/Teaching/SpatialAnalysis-MontevideoWorkshop2019/Notebooks/Montevideo_Data/montevideourbano_shp")
MontevideoUrbano <- st_read("MontevideoUrbano.shp")
library(tidyverse)
Montevideo <- Zones %>% filter(NOMBRE == "MONTEVIDEO")
plot(st_geometry(Montevideo))
st_crs(Montevideo)
st_crs(Zones)
st_crs(Montevideo)
st_crs(Zones)
st_crs(Montevideo)
st_crs(Zones)
st_crs(Montevideo) == st_crs(Accidentes)
Montevideo <- st_set_crs(Montevideo,32721)
st_crs(Montevideo) == st_crs(Accidentes)
plot(st_geometry(Montevideo))
plot(st_geometry(Accidentes), add = TRUE)
View(Accidentes)
